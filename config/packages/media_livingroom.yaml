########################################
#   LIVING ROOM MEDIA                  #
########################################

# LIVING ROOM TV ###
media_player:
  - platform: universal
    name: Living Room TV
    device_class: tv
    unique_id: living_room_tv
    children:
      - media_player.atv
      - media_player.kodi_atv
      - media_player.sony_bravia_tv
    active_child_template: >
      {% if is_state_attr('media_player.atv', 'app_id', 'org.xbmc.kodi-tvos')
      and not is_state('media_player.kodi_atv', 'off') %}
      media_player.kodi_atv
      {% elif is_state_attr('media_player.sony_bravia_tv', 'source', 'HDMI 2') %}
      media_player.atv
      {% else %}
      media_player.sony_bravia_tv
      {% endif %}
    # state_template: >
    #   {% if is_state('media_player.sony_bravia_tv', 'off') %}
    #     off
    #   {% else %}
    #     {{ states('media_player.atv') }}
    #   {% endif %}

    # attributes:
    # state: remote.sony_bravia_tv
    # source_list: media_player.atv|source_list
    # source: media_player.sony_bravia_tv|source
    # volume_level: media_player.sony_bravia_tv|volume_level
    commands:
      turn_on:
        service: remote.turn_on
        target:
          entity_id: remote.sony_bravia_tv
      turn_off:
        service: script.atv_sleep
        data: {}

# LIVING ROOM SENSOR YOUTUBE ###
command_line:
  - sensor:
      name: youtube_watching
      unique_id: atv_youtube_watching
      command: |-
        python3 << EOF
        import sys
        from http.cookiejar import MozillaCookieJar
        import json
        import re
        import requests
        COOKIES_FILE = "/config/.youtube_new.txt"
        if __name__ == "__main__":
            # COOKIES
            cookie_jar = MozillaCookieJar(COOKIES_FILE)
            try:
                cookie_jar.load(ignore_discard=True, ignore_expires=True)
            except OSError as notfound_error:
                print(f"WARNING: {COOKIES_FILE} not found\nDEBUG: {notfound_error}")
                sys.exit()
            # SESSION
            session = requests.Session()
            session.headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)\
                    AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                "Accept-Language": "en-us,en;q=0.5",
                "Sec-Fetch-Mode": "navigate",
            }
            session.cookies = cookie_jar
            # RESPONSE
            response = session.get("https://www.youtube.com/feed/history")
            cookie_jar.save(ignore_discard=True, ignore_expires=True)
            html = response.text
            # JSON
            try:
                REGEX = r"var ytInitialData = (.*);<\/script>"
                match = re.search(REGEX, html).group(1)
                data = json.loads(match)
                path = data["contents"]["twoColumnBrowseResultsRenderer"]["tabs"][0]["tabRenderer"]\
                    ["content"]["sectionListRenderer"]["contents"][0]["itemSectionRenderer"]["contents"]
            except AttributeError as data_error:
                print(
                    f"WARNING: Can't find data, update cookie file\nDEBUG: {data_error}")
                sys.exit()
            # THUMBNAIL
            def thumbnail(fid):
                """ return max resolution """
                url = f"https://img.youtube.com/vi/{fid}"
                maxres = f"{url}/maxresdefault.jpg"
                default = f"{url}/0.jpg"
                if requests.get(maxres, timeout=3).status_code == 200:
                    return maxres
                return default
            # OUTPUT
            if "reelShelfRenderer" in path[0]:
                key = path[1]["videoRenderer"]
            else:
                key = path[0]["videoRenderer"]
            output = {
                "channel": key["longBylineText"]["runs"][0]["text"],
                "title": key["title"]["runs"][0]["text"],
                "video_id": key["videoId"],
                "duration_string": key["lengthText"]["simpleText"],
                "thumbnail": thumbnail(key["videoId"]),
                "entity_picture": thumbnail(key["videoId"]),
                "original_url": f'https://www.youtube.com/watch?v={key["videoId"]}',
            }
            print(json.dumps(output, indent=4))
        EOF
      value_template: >
        {{ states.sensor.youtube_watching.attributes.entity_picture }}
      json_attributes:
        - channel
        - title
        - video_id
        - duration_string
        - original_url
        - entity_picture
      scan_interval: 86400
