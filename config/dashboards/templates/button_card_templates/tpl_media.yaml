base_media:
  variables:
    media_on: >
      [[[ return !entity || ['playing', 'on', 'paused'].indexOf(entity.state) !== -1; ]]]
    media_off: >
      [[[ return !entity || ['off', 'idle', 'standby', 'unknown', 'unavailable', 'none'].indexOf(entity.state) !== -1; ]]]
    entity_picture: >
      [[[ return !entity || entity.attributes.entity_picture; ]]]
    is_youtube: >
      [[[
        let is_youtube = entity?.attributes?.app_id === 'com.google.ios.youtube',
            shield_youtube = entity?.attributes?.source === 'YouTube',
            sensor = this?._config?.triggers_update,
            media_title = entity?.attributes?.media_title,
            watching_title = states[sensor]?.attributes?.title;
        if (is_youtube || shield_youtube && media_title === watching_title) {
            return true;
        }
      ]]]
    is_kodi: >
      [[[
        let is_kodi = states['media_player.atv'].attributes.app_id === 'org.xbmc.kodi-tvos',
            shield_kodi = states['media_player.shield_android_tv'].attributes.source === 'Kodi';
        if (is_kodi || shield_kodi) {
            return true;
        }
      ]]]
    is_homepod: >
      [[[
        let is_homepod = states['media_player.mass_universal_airplay'].state === 'playing';
          if (is_homepod) {
            return true;
          }
      ]]]
  tap_action:
    action: >
      [[[
        return variables.media_on
            ? 'call-service'
            : 'none';
      ]]]
    service: media_player.media_play_pause
    service_data:
      entity_id: >
        [[[
          return variables.entity_id;
        ]]]
  double_tap_action:
    action: more-info
  triggers_update: all
  styles:
    state:
      - color: >
          [[[
            return variables.state_on
                ? 'rgb(139, 51, 51)'
                : null;
          ]]]
    card:
      - overflow: hidden
      - color: >
          [[[
            let game_image = entity.attributes.title_image;
            if (variables.is_youtube || variables.is_kodi) {
                return '#efefef';
            } else {
                return entity && game_image !== undefined
                  ? '#efefef'
                  : variables.media_on && variables.entity_picture === undefined
                    ? 'rgba(0, 0, 0, 0.6)'
                    : variables.media_off
                        ? '#97989c'
                        : '#efefef';
            }
          ]]]
      - text-shadow: >
          [[[
            let game_image = entity.attributes.title_image;
            if (variables.is_youtube || variables.is_kodi) {
                return `1px 1px 5px rgba(18, 22, 23, 0.9)`;
            } else {
                return entity && game_image !== undefined
                  ? `1px 1px 5px rgba(18, 22, 23, 0.9)`
                  : variables.media_off || variables.entity_picture === undefined
                    ? 'none'
                    : '4px 5px 5px rgba(18, 22, 23, 0.9)';
            }
          ]]]
  #################################################
  #                                               #
  #                     MEDIA                     #
  #                                               #
  #################################################
media:
  template:
    - base
    - base_media
  styles:
    custom_fields:
      icon:
        - width: 70%
        - margin-left: 2%
        - fill: '#9da0a2'
        - display: >
            [[[
              let game_image = entity.attributes.title_image;
              if (variables.is_youtube) {
                  return 'none';
              }
              else {
                  return entity && game_image !== undefined
                  ? 'none'
                  : variables.media_off || variables.entity_picture === undefined
                      ? 'initial'
                      : 'none';
              }
            ]]]
    card:
      - background-color: none
      - background-size: cover
      - background-position: center
      - background-image: >
          [[[
            let game_image = entity.attributes.title_image;

            if (variables.is_youtube) {
                return `linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(${states[this._config?.triggers_update].state})`;
            } else {
                return entity && game_image !== undefined
                  ? `linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(${game_image})`
                  : variables.media_on && variables.entity_picture === undefined
                    ? 'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)'
                    : variables.media_off
                        ? 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)'
                        : `linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(${variables.entity_picture})`;
            }
          ]]]
  #################################################
  #                                               #
  #               CONDITIONAL MEDIA               #
  #                                               #
  #################################################
conditional_media:
  aspect_ratio: 1000/996
  template:
    - base
    - base_media
    - icon_play_pause
    # - icon_playing_bars
  variables:
    i: >
      [[[
        if (entity) {
            let data = entity.attributes.data;
            return data === undefined || Math.floor(Math.random() * (data.length - 1)) + 1;
        }
      ]]]
  state_display: >
    [[[
      let horizontalStack = this.getRootNode().host,
          swipeCard = horizontalStack.getRootNode().host,
          gridTitle = swipeCard.getRootNode().querySelector("h1");
      swipeCard.swiper.on("slideChange", () => {
          if (swipeCard.swiper.realIndex === 0) {
              gridTitle.textContent = "Media";
          }
          else if (swipeCard.swiper.realIndex === 1) {
              gridTitle.textContent = "Players";
          }
      });
      if (entity) {
          let elt = this.shadowRoot,
              await = setTimeout(marquee, 100),
              data = entity.attributes.data,
              artist = entity.attributes.media_artist,
              title = entity.attributes.media_title,
              originaltitle = entity.attributes.originaltitle,
              game_title = entity.attributes.title_name;
          var output = artist === undefined && title !== undefined
            ? title
            : game_title !== undefined
              ? `${game_title}`
              : title === undefined && artist !== undefined
                  ? artist
                  : title !== undefined && artist !== undefined
                      ? `<div id="title" style="font-weight: 800; text-transform: uppercase; font-family: Raleway; letter-spacing: 0.07vw;">${title}</div><span style="font-size: 0.90em; color: #efefefd1; font-family: Raleway; text-transform: capitalize; letter-spacing: 0.03vw;">${artist}</span>`
                      : variables.translate_idle;
          function marquee() {
              let state = elt.getElementById("title"),
                  container = elt.getElementById("container");
              if (state && container) {
                  state.innerHTML = title;
                  let ro = new ResizeObserver(entries => {
                      let spacer = "&nbsp;".repeat(3),
                          s = entries[0],
                          c = entries[1],
                          r = s && s.contentRect &&
                              c && c.contentRect &&
                              s.contentRect.width !== 0 &&
                              c.contentRect.width !== 0;
                      if (r && s.contentRect.width < c.contentRect.width) {
                          state.classList.remove("marquee");
                      }
                      else if (r && s.contentRect.width >= c.contentRect.width) {
                          state.innerHTML = `${title} ${spacer} ${title} &nbsp;`;
                          state.classList.add("marquee");
                      }
                  });
                  ro.observe(state);
                  ro.observe(container);
              }
          }
          return output;
      }
    ]]]
  # tap_action:
  #   action: call-service
  #   service: media_player.media_play_pause
  #   service_data:
  #     entity_id: >
  #       [[[ return variables.entity_id; ]]]
  # double_tap_action:
  #   action: call-service
  #   service: media_player.media_next_track
  #   service_data:
  #     entity_id: >
  #       [[[ return variables.entity_id; ]]]
  styles:
    grid:
      - gap: 0.65%
    name:
      - justify-self: flex-start
      - line-height: 120%
      - padding: 0.2vw
      - margin: -0.2vw
      - color: rgba(255,255,255,0.6)
      - display: >
          [[[
            if (window.matchMedia('(max-width: 800px)').matches)
              return 'none';
            if (window.matchMedia('(max-width: 1440px)').matches)
              return 'block';
            else return 'block';
          ]]]
    state:
      - line-height: 120%
      - max-width: 100%
      - text-shadow: 3px 1px 4px black
      - text-transform: uppercase
      - padding-bottom: >
          [[[
            return variables.is_kodi || variables.media_on ? '9%' : '4%';
          ]]]
      - overflow: visible
    card:
      - padding: 5.75% 5.75% 0 5.75%
      - border-radius: calc(var(--button-card-border-radius) / 2)
      - background: &media_background >
          [[[
            if (entity) {
              if (variables.is_youtube) {
                  return `rgba(115, 115, 115, 0.2) center center/cover no-repeat`;
              } else {
                let data = entity.attributes.data;
                return data && (data[variables.i].entity_picture)
                    ? `rgba(115, 115, 115, 0.2) center center/cover no-repeat`
                    :  data && (data[variables.i].fanart)
                      ? `rgba(115, 115, 115, 0.2) top center/cover no-repeat`
                      : `rgba(115, 115, 115, 0.2) center center/cover no-repeat`;
              }
            }
          ]]]
      - background-image: &media_background_image >
          [[[
            if (entity) {
              if (variables.is_youtube) {
                  return `url(${states[this._config?.triggers_update].attributes.entity_picture})`;
              }
              if (variables.is_kodi) {
                  let fanart = states[this._config?.triggers_update].attributes.fanart;
                  let poster = states[this._config?.triggers_update].attributes.poster;
                  return `url(${poster})`;
              }
              if (entity?.attributes?.app_id === 'com.google.ios.youtubekids') {
                  return `url(/local/img/channels/youtubekids.png)`;
              } else {
                let data = entity.attributes.data,
                game_image = entity.attributes.title_image;
                return game_image !== undefined
                  ? `url("${game_image}")`
                  : data && (data[variables.i].entity_picture || data[variables.i].fanart)
                    ? `linear-gradient(to top, rgba(0, 0, 0, .65) 0%, rgba(0, 0, 0, 0) 100%), url("${data[variables.i].entity_picture}"), url("${data[variables.i].fanart}")`
                    : `url("${variables.entity_picture}")`;
              }
            }
          ]]]
      - color: >
          [[[
            return entity === undefined
                ? '#97989c'
                : '#efefef';
          ]]]
      - text-shadow: >
          [[[
            return entity === undefined
                ? 'none'
                : '1px 1px 5px rgba(18, 22, 23, 0.9)';
          ]]]
    custom_fields:
      icon:
        - width: 30%
        - fill: >
            [[[
              return entity && variables.media_on
                  ? 'rgba(255, 255, 255, 0.80)'
                  : '#9da0a2';
            ]]]
      blur_overlay:
        - display: block
        - position: absolute
        - width: 122%
        - height: 101%
        - filter: var(--blur-intensity)
        - clip-path: >
            [[[
              if (entity) {
                if (variables.is_youtube) {
                    return `inset(74% 7% 3.45% 9% round 0 0 calc(var(--button-card-border-radius) / 2) calc(var(--button-card-border-radius) / 2))`;
                } else {
                  return `inset(80% 3.45% 3.45% 5.45% round 0 0 calc(var(--button-card-border-radius) / 2) calc(var(--button-card-border-radius) / 2))`;
                }
              }
            ]]]
        - background: *media_background
        - background-image: *media_background_image
        # - left: -10%
        # - bottom: -5%
  custom_fields:
    blur_overlay: >
      [[[
        setTimeout(() => {
            let elt = this.shadowRoot,
                card = elt.getElementById('card'),
                container = elt.getElementById('container'),
                blur_overlay = elt.getElementById('blur_overlay');
            if (elt && card && container && blur_overlay) {
                card.insertBefore(blur_overlay, container);
            }
          }, 0);
        return ' ';
      ]]]
    #################################################
    #                                               #
    #         CONDITIONAL MEDIA SHOWS               #
    #                                               #
    #################################################
conditional_media_shows:
  aspect_ratio: 1000/996
  show_name: false
  template:
    - base
  variables:
    i: >
      [[[
        if (entity) {
            let data = entity.attributes.data;
            return data === undefined || Math.floor(Math.random() * (data.length - 1)) + 1;
        }
      ]]]
  state_display: >
    [[[
      let horizontalStack = this.getRootNode().host,
          swipeCard = horizontalStack.getRootNode().host,
          gridTitle = swipeCard.getRootNode().querySelector("h1");
      swipeCard.swiper.on("slideChange", () => {
          if (swipeCard.swiper.realIndex === 0) {
              gridTitle.textContent = "Movies";
          }
          else if (swipeCard.swiper.realIndex === 1) {
              gridTitle.textContent = "TV Shows";
          }
      });
      if (entity) {
          let elt = this.shadowRoot,
              await = setTimeout(marquee, 100),
              data = entity.attributes.data;
            if (data !== undefined) {
              let airdate = new Date(Date.parse(data[variables.i].airdate)),
                  datestring = airdate.getDate() + "-" + (airdate.getMonth()+1) + "-" + airdate.getFullYear(),
                  showepisode = data[variables.i].episode,
                  showtitle = data[variables.i].title;
              var title = `<span style="font-weight: 700; text-transform: uppercase; color: #ffffffcc;">${data[variables.i].title}</span>`;
              var episode = `<span style="text-transform: capitalize; font-family: Raleway;">${data[variables.i].episode}</span>`;
              var number = data[variables.i].number === undefined && data[variables.i].airdate !== undefined
                  ? `(${data[variables.i].airdate.split("-")[0]})`
                  : data[variables.i].number === undefined && data[variables.i].airdate === undefined
                      ? ' '
                      : (data[variables.i].number).match(/.{1,3}/g)[0] + "·" + (data[variables.i].number).match(/.{1,3}/g)[1];
              var title_episode = `<span style="font-weight: 700; text-transform: uppercase; color: #ffffffcc;">${data[variables.i].title}</span>&nbsp;·&nbsp <span style="text-transform: capitalize; font-family: Raleway;">${data[variables.i].episode}</span>`;
              var output = window.matchMedia('(max-width: 800px)').matches
                ? `
                <div id="title">${title}&nbsp;·&nbsp${episode}</div>
                <span class="year" role="img">${number}</span>
                <span class="info" style="color: #ffffff80;">${datestring}</span>
                  `
                : `
                <div id="title">${title}</div>
                <div>${episode}</div>
                <span class="year" role="img">${number}</span>
                <span class="info" style="color: #ffffff80;">${datestring}</span>
                `
            }
              function marquee() {
                  let state = elt.getElementById("title"),
                      container = elt.getElementById("container");
                  if (state && container) {
                      state.innerHTML = title;
                      let ro = new ResizeObserver(entries => {
                          let spacer = "&nbsp;".repeat(3),
                              s = entries[0],
                              c = entries[1],
                              r = s && s.contentRect &&
                                  c && c.contentRect &&
                                  s.contentRect.width !== 0 &&
                                  c.contentRect.width !== 0;
                          if (r && s.contentRect.width < c.contentRect.width) {
                              state.classList.remove("marquee");
                          }
                          else if (r && s.contentRect.width >= c.contentRect.width) {
                              state.innerHTML = `${title_episode} ${spacer} ${title_episode} &nbsp;`;
                              state.classList.add("marquee");
                          }
                      });
                      ro.observe(state);
                      ro.observe(container);
                  }
              }
              return output;
      }
    ]]]
  styles:
    grid:
      - gap: 0.65%
    name:
      - justify-self: flex-start
      - line-height: 123%
      - padding: 0.2vw
      - margin: -0.2vw
    state:
      - line-height: 130%
      - padding-bottom: 1.5%
      - color: #ffffffcc
      - text-shadow: black 3px 2px 4px
    card:
      - padding: 5.75% 5.75% 0 5.75%
      - border-radius: calc(var(--button-card-border-radius) / 2)
      - background: *media_background
      - background-image: *media_background_image
      - color: >
          [[[
            return entity === undefined
                ? '#97989c'
                : '#efefef';
          ]]]
      - text-shadow: >
          [[[
            return entity === undefined
                ? 'none'
                : '1px 1px 5px rgba(18, 22, 23, 0.9)';
          ]]]
    custom_fields:
      icon:
        - width: 30%
        - fill: >
            [[[
              return entity && variables.media_on
                  ? 'rgba(255, 255, 255, 0.80)'
                  : '#9da0a2';
            ]]]
      blur_overlay:
        - display: block
        - position: absolute
        - width: 110%
        - height: 110%
        - filter: var(--blur-intensity)
        - clip-path: >
            inset(77.5% 3.45% 1.45% 5.45% round 0 0 calc(var(--button-card-border-radius) / 2) calc(var(--button-card-border-radius) / 2))
        - background: *media_background
        - background-image: *media_background_image
        - left: -6%
        - bottom: -2%
  custom_fields:
    blur_overlay: >
      [[[
        setTimeout(() => {
            let elt = this.shadowRoot,
                card = elt.getElementById('card'),
                container = elt.getElementById('container'),
                blur_overlay = elt.getElementById('blur_overlay');
            if (elt && card && container && blur_overlay) {
                card.insertBefore(blur_overlay, container);
            }
          }, 0);
        return ' ';
      ]]]
  #################################################
  #                                               #
  #          ADDED MOVIES                         #
  #                                               #
  #################################################
kodi_lib_base:
  template:
    - base
  aspect_ratio: 2/1
  show_name: true
  show_state: false
  show_entity_picture: false
  show_icon: false
  show_label: true
  variables:
    tilt_enable: >
      [[[ return false; ]]]
  tap_action: block
  label: >
    [[[
      if (entity) {
        if (entity && entity.attributes) {
          let info = entity.attributes.plot;
          var plot = `
            <span>${info}</span>
          `;
          return plot;
        }
      }
    ]]]
  custom_fields:
    poster: >
      [[[
        if (entity){
          if (entity && entity.attributes) {
            let poster = entity.attributes.poster_url;
            return`
              <div class="image">
              <img src="${poster}">
              </div>
            `;
          }
        }
      ]]]
  styles:
    grid:
      - grid-template-areas: |
          ". n"
          "poster l"
      - grid-template-columns: 1fr 2fr
      - grid-template-rows: min-content 1fr
      - grid-gap: 1%
      - align-items: flex-start
  #ADDED MOVIES
added_movies:
  template:
    - base
    - movie_tap_info
  aspect_ratio: 1/1
  show_state: true
  show_label: true
  show_name: false
  double_tap_action: !include ../../shared/popup/popup_kodi.yaml

  label: >
    [[[
      if (entity) {
        if (entity && entity.attributes) {
          let cztitle = entity.attributes.title,
              originaltitle = entity.attributes.original_title,
              rating = entity.attributes.rating,
              country = entity.attributes.country,
              director = entity.attributes.director,
              writers = entity.attributes.writers,
              plot = entity.attributes.plot,
              year = entity.attributes.year,
              genre = entity.attributes.genre;
          var info = `
            <div class="info">
            <span style="color: #C7C7C7;font-weight: 700;font-family: Raleway;">${country}&nbsp;·&nbsp${year}</span>
            <span style="color: #C7C7C7;font-family: Raleway;">${genre}</span>
            </div>`;
          return info;
        }
      }
    ]]]
  state_display: >
    [[[
      if (entity) {
          let elt = this.shadowRoot,
              await = setTimeout(marquee, 100);
        if (entity && entity.attributes) {
          let cztitle = entity.attributes.title,
              originaltitle = entity.attributes.original_title,
              rating = entity.attributes.rating,
              country = entity.attributes.country,
              year = entity.attributes.year,
              genre = entity.attributes.genre;

          var title = cztitle == originaltitle
            ? `<span style="font-weight: 700; text-transform: uppercase; letter-spacing: 2px;">${cztitle}</span>`
            : `<span style="font-weight: 700; text-transform: uppercase;">${cztitle}</span>&nbsp;·&nbsp<span style="text-transform: capitalize; font-family: Raleway;">${originaltitle}</span>`;
          var output = `
            <div id="title" style="display:flex; align-items: baseline;width: fit-content;">${title}</div>
            `;
        }
          function marquee() {
              let state = elt.getElementById("title"),
                  container = elt.getElementById("container");
              if (state && container) {
                  state.innerHTML = title;
                  let ro = new ResizeObserver(entries => {
                      let spacer = "&nbsp;".repeat(3),
                          s = entries[0],
                          c = entries[1],
                          r = s && s.contentRect &&
                              c && c.contentRect &&
                              s.contentRect.width !== 0 &&
                              c.contentRect.width !== 0;
                      if (r && s.contentRect.width < c.contentRect.width) {
                          state.classList.remove("marquee");
                      }
                      else if (r && s.contentRect.width >= c.contentRect.width) {
                          state.innerHTML = `${title} ${spacer} ${title}`;
                          state.classList.add("marquee");
                      }
                  });
                  ro.observe(state);
                  ro.observe(container);
              }
          }
          return output;
      }
    ]]]
  custom_fields:
    rating: >
      [[[
        if (entity) {
          if (entity && entity.attributes ) {
              let rating = Math.round(( entity.attributes.rating * 10));
              var stroke = '#20d07b';
                if (rating <= 40) { stroke = '#ff0000' };
                if (rating <= 60) { stroke = '#ffcc00' };
              let path = `
                <svg viewBox="0 0 36 36" class="circular-chart green">
                  <style>
                    .flex-wrapper {
                      display: flex;
                      flex-flow: row nowrap;
                    }
                    .single-chart {
                      width: 33%;
                      justify-content: space-around;
                    }
                    .circle-bg {
                      fill: #000000;
                      stroke: #ffffff85;
                      stroke-width: 3.8;
                    }
                    .circle {
                      fill: none;
                      stroke-width: 2.8;
                      stroke-linecap: round;
                      animation: progress;
                      animation-duration: 6s;
                      animation-iteration-count: infinite;
                      animation-timing-function: cubic-bezier(0.445, 0.05, 0.55, 0.95);
                    }
                    @keyframes progress {
                      0% {
                        stroke-dasharray: 0 100;
                      }
                    }
                    tspan {
                      font-size: 10px;
                    }
                    text {
                      font-size: 12px;
                      font-weight: 500;
                      letter-spacing: -0.03rem;
                      fill: #ffffff;;
                    }
                    #circle_value, tspan {
                      text-anchor: middle;
                      dominant-baseline: central;
                    }
                    .circular-chart.green .circle {
                      stroke: ${stroke};
                    }
                    .percentage {
                      fill: #ffffff;
                      font-family: Poppins;
                      font-size: 0.6em;
                      font-weight: 700;
                      text-anchor: middle;
                    }
                  </style>
                <g class="flex-wrapper">
                  <g class="single-chart">
                    <path class="circle-bg" d="M18 2.0845
                    a 15.9155 15.9155 0 0 1 0 31.831
                    a 15.9155 15.9155 0 0 1 0 -31.831"/>
                  <path class="circle" stroke-dasharray="${rating}, 100" d="M18 2.0845
                    a 15.9155 15.9155 0 0 1 0 31.831
                    a 15.9155 15.9155 0 0 1 0 -31.831"/>
                  <text id="circle_value" x="50%" y="52%" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle" >${rating}<tspan dx=".2" dy="-.4">%</tspan></text>
                </g>
                </g>
              </svg>
            `;
            return `${path}`;
          }
        }
      ]]]
    detail: >
      [[[
        if (entity) {
          if (entity && entity.attributes) {
              let cztitle = entity.attributes.title,
                  originaltitle = entity.attributes.original_title,
                  rating = entity.attributes.rating,
                  country = entity.attributes.country,
                  director = entity.attributes.director,
                  writers = entity.attributes.writers,
                  plot = entity.attributes.plot,
                  year = entity.attributes.year,
                  genre = entity.attributes.genre;
              var moreinfo = director === "" && plot !== undefined
                ? `<hr style="width:50%; opacity:0.2;"><span style="text-align: justify; font-style: italic;">${plot}</span>`
                : director !== undefined && plot !== undefined
                  ? `<span>Directors: ${director}</span><hr style="width:50%; opacity:0.2;"><span style="text-align: justify; font-style: italic;">${plot}</span>`
                    : '';
              var output = `
                  <div class="infoicon">
                    <ha-icon icon="mdi:dots-horizontal-circle" style="color: var(--disabled-text-color);"></ha-icon>
                  </div>
                  <div class="moreinfo">
                    <span style="color: #d3d3d3;font-weight: 700;font-family: Raleway; font-size: 1.5rem; text-align: center;"> ${originaltitle}</span>
                      ${moreinfo}
                  </div>
                `;
            }
          return output;
        }
      ]]]

    poster: >
      [[[
        if (entity && entity.attributes.entity_picture)
          return `
            <img src="${entity.attributes.poster_url}">
          `
      ]]]
    fanart: ''
  styles:
    grid:
      - grid-template-areas: |
          "poster poster"
          "s s"
          "l l"
      - grid-template-columns: 1fr 1fr
      - grid-template-rows: auto min-content min-content
      - gap: 0
      - align-items: flex-start

    label:
      - color: '#C7C7C7'
      - padding-bottom: 4%

    state:
      - color: '#C4C4C4'
      - line-height: normal
      - text-shadow: black 3px 2px 4px
      - width: 100%

    card:
      - padding: 0%
      - border-radius: calc(var(--button-card-border-radius) / 2)
      - background-color: '#00000'
      - overflow: hidden
      - --speed: >
          [[[
            let cztitle = entity.attributes.title,
                originaltitle = entity.attributes.original_title;
            const containerWidth = 24;
            var title = cztitle == originaltitle
              ? cztitle
              : cztitle + " " + originaltitle;
            var speed = Math.round((title.length / containerWidth) * 6);

            return `${speed}s`;
          ]]]

    custom_fields:
      # tailwind:
      #   - display: block
      #   - position: absolute
      #   - width: 100%
      #   - height: 100%

      # info-icon:
      #   - position: absolute
      #   - height: auto
      #   - right: 2%
      #   - top: 2%
      #   - width: 7%
      fanart:
        - display: block
        - position: absolute
        - width: 100%
        - height: 100%
        - background: &bgmovie >
            [[[
                if (entity && entity.attributes)
                  return  `center center/cover no-repeat`;
            ]]]
        - background-image: &bgimgmovie >
            [[[
              if (entity && entity.attributes)
                return `linear-gradient(to top, rgba(0, 0, 0, 1) 10%, rgba(0, 0, 0, 0) 100%), url("${entity.attributes.fanart_url}")`
            ]]]
      rating:
        - display: block
        - position: absolute
        - top: 5%
        - left: 5%
        - width: 15%

  #################################################
  #                                               #
  #               PROGRESS BAR                    #
  #                                               #
  #################################################
progress_bar:
  styles:
    custom_fields:
      progress:
        - background-color: var(--progress-bar-background-color)
        - position: absolute
        - left: 0%
        - top: unset
        - bottom: 0px
        # - top: >
        #     [[[
        #       if (entity) {
        #         if (variables.is_youtube) {
        #             return '75%';
        #         } else {
        #           return '82%';
        #         }
        #       }
        #     ]]]
        - height: var(--progress-bar-height)
        - width: 100%
      bar:
        - background-color: var(--progress-bar-color)
        - position: absolute
        - left: 0%
        - top: unset
        - bottom: 0px
        # - top: >
        #     [[[
        #       if (entity) {
        #         if (variables.is_youtube) {
        #             return '75%';
        #         } else {
        #           return '82%';
        #         }
        #       }
        #     ]]]
        - height: var(--progress-bar-height)
        - z-index: 1
        - transition: 1s ease-out
  custom_fields:
    bar: >
      [[[
        if (entity.attributes.media_position !== undefined) {
        setTimeout(() => {
          let elt = this.shadowRoot,
              card = elt.getElementById('card'),
              container = elt.getElementById('container'),
              bar = elt.getElementById('bar');
          if (elt && card && container && bar) {
              card.insertBefore(bar, container);
                function update() {
                  let mediaPositionUpdatedAt = entity.attributes.media_position_updated_at,
                      mediaPosition = entity.attributes.media_position,
                      mediaDuration = entity.attributes.media_duration,
                      mediaContentType = entity.attributes.media_content_type;
                  let percentage = entity.state === 'paused'
                    ? (mediaPosition / mediaDuration * 100)
                    : entity.state === 'playing'
                      ? (((Date.now() / 1000) - (new Date(mediaPositionUpdatedAt).getTime() / 1000) + mediaPosition) / mediaDuration * 100)
                      : 0;
                  bar.style.width = percentage.toFixed(1) + '%';
                  requestAnimationFrame(update);
                }
                requestAnimationFrame(update);
          }
        }, 0);
        return ' ';}
      ]]]
    progress: >
      [[[
        if (entity.attributes.media_position !== undefined) {
        setTimeout(() => {
            let elt = this.shadowRoot,
                card = elt.getElementById('card'),
                container = elt.getElementById('container'),
                progress = elt.getElementById('progress');
            if (elt && card && container && progress) {
                card.insertBefore(progress, container);
            }
          }, 0);
        return ' ';}
      ]]]
  #################################################
  #                                               #
  #               MEDIA PLAYER                    #
  #                                               #
  #################################################
mediaplayer:
  template:
    - base
    - circle
    - loader
    - icon_tv
  state_display: >
    [[[
      return variables.state === 'off' ? " " : null;
    ]]]
  variables:
    state_on: >
      [[[ return ['on', 'idle', 'playing', 'paused', 'standby'].indexOf(!entity || entity.state) !== -1; ]]]
    circle_input: >
      [[[
        if (entity) {
          // if light group get brightness from child to remove bounce
          let volume = Math.round(entity.attributes.volume_level * 100)
          return volume === 0 && entity.state !== 'off'
            ? 1
            : volume
        }
      ]]]
    circle_input_unit: '%'
currently_playing:
  template:
    - conditional_media
    - progress_bar
    - icon_spotify_color
  variables:
    tilt_enable: >
      [[[
        return false;
      ]]]
    entity_id: >
      [[[ return !entity || entity.entity_id; ]]]
  tap_action:
    action: call-service
    service: media_player.media_play_pause
    service_data:
      entity_id: >
        [[[ return variables.entity_id; ]]]
  custom_fields:
    spotify:
      card:
        type: custom:mushroom-media-player-card
        entity: >
          [[[ return entity.entity_id; ]]]
        use_media_info: false
        media_controls: []
        fill_container: false
        show_volume_level: false
        collapsible_controls: false
        volume_controls: []
        icon_type: none
        secondary_info: none
        primary_info: none
        card_mod:
          style: |
            ha-card:before {
              transform: translate3d(0,0,0);
              -webkit-transform: translate3d(0,0,0);
              content: "";
              background:
                {% if is_state('media_player.mass_universal_airplay', 'playing') %}
                  url( '{{ state_attr('media_player.mass_universal_airplay', "entity_picture") }}')
                {% else %}
                  url( '{{ state_attr('media_player.spotify', "entity_picture") }}')
                {% endif %} center no-repeat;
              background-size: contain;
              filter: drop-shadow(4px 4px 6px rgba(0, 0, 0, 0.5));
              border-radius: var(--control-border-radius);
              aspect-ratio: 1 / 1;
            }
    media_card_speaker:
      card:
        type: picture-elements
        image: /local/img/svg/overlay.svg
        card_mod:
          style: |
            ha-card {
              --ha-card-background: none !important;
            }
        elements:
          - type: 'custom:button-card'
            icon: 'mdi:dots-vertical'
            entity: >
              [[[ return entity.entity_id; ]]]
            template: music_card_speaker_button
            style:
              right: '-5%'
              top: 5%
              height: 10%
              width: 10%
            tap_action:
              haptic: medium
              action: more-info
            hold_action:
              action: none
          - type: 'custom:button-card'
            icon: 'mdi:skip-previous'
            entity: >
              [[[ return entity.entity_id; ]]]
            template: music_card_speaker_button
            style:
              right: 80%
              top: 50%
              height: 15%
              width: 15%
            tap_action:
              action: call-service
              service: media_player.media_previous_track
              service_data:
                entity_id: >
                  [[[ return variables.entity_id; ]]]
              haptic: medium
          - type: 'custom:button-card'
            icon: 'mdi:skip-next'
            entity: >
              [[[ return entity.entity_id; ]]]
            template: music_card_speaker_button
            style:
              right: -10%
              top: 50%
              height: 15%
              width: 15%
            tap_action:
              action: call-service
              service: media_player.media_next_track
              service_data:
                entity_id: >
                  [[[ return variables.entity_id; ]]]
              haptic: medium
          - type: 'custom:button-card'
            entity: >
              [[[ return entity.entity_id; ]]]
            icon: >
              [[[
                if (entity.state === 'paused')
                    return 'mdi:play';
                if (entity.state === 'playing')
                    return  'mdi:pause';
              ]]]
            aspect_ratio: 1/1
            show_name: false
            show_icon: true
            size: 100%
            style:
              right: 10%
              top: 50%
              height: 40%
              width: 40%
            styles:
              icon:
                - color: rgba(255, 255, 255, 1)
                - filter: drop-shadow(2px 4px 4px rgba(0,0,0,0.7))
            tap_action:
              action: call-service
              service: media_player.media_play_pause
              service_data:
                entity_id: >
                  [[[ return entity.entity_id; ]]]
              haptic: medium
            hold_action:
              action: none
            extra_styles: |
              [[[
                return `
                  #icon {
                    filter: drop-shadow(2px 4px 4px rgba(0,0,0,0.7));
                    opacity: 0;
                    transition-duration: 0.1s;
                  }
                  #icon:hover {
                    opacity: 0.7;
                    color: #ffffff;
                    transform: scale(1.2);
                    transition-duration: 0.2s;
                  }
                `
              ]]]
          # - icon: 'mdi:close-circle'
          #   template: music_card_speaker_button
          #   entity: >
          #     [[[ return variables.entity_id; ]]]
          #   style:
          #     right: 35%
          #     top: 15%
          #     height: 15%
          #     width: 15%
          #   tap_action:
          #     action: call-service
          #     service: media_player.volume_mute
          #     service_data:
          #       is_volume_muted: >
          #         [[[ if (entity.attributes.is_volume_muted == false) return 'true'; return
          #         'false' ]]]
          #       entity_id: >
          #         [[[ return variables.entity_id; ]]]
          #     haptic: medium
          #   hold_action:
          #     action: none
          #   type: 'custom:button-card'
          - type: 'custom:button-card'
            icon: 'mdi:volume-minus'
            entity: >
              [[[ return variables.entity_id; ]]]
            template: music_card_speaker_button
            style:
              right: 60%
              top: 25%
              height: 15%
              width: 15%
            tap_action:
              action: call-service
              service: media_player.volume_set
              service_data:
                volume_level: >
                  [[[ return entity.attributes.volume_level - 0.020; ]]]
                entity_id: >
                  [[[ return entity.entity_id; ]]]
              haptic: medium
          - type: 'custom:button-card'
            icon: 'mdi:volume-plus'
            entity: >
              [[[ return variables.entity_id; ]]]
            template: music_card_speaker_button
            style:
              left: 75%
              top: 25%
              height: 15%
              width: 15%
            tap_action:
              action: call-service
              service: media_player.volume_set
              service_data:
                volume_level: >
                  [[[ return entity.attributes.volume_level + 0.020; ]]]
                entity_id: >
                  [[[ return variables.entity_id; ]]]
              haptic: medium
          # - icon: 'mdi:power-standby'
          #   template: music_card_speaker_button
          #   #entity: '[[entity]]'
          #   style:
          #     right: 80%
          #     top: 10%
          #     height: 10%
          #     width: 10%
          #   tap_action:
          #     action: call-service
          #     service: media_player.toggle
          #     service_data:
          #       entity_id: >
          #         [[[ return entity.entity_id; ]]]
          #     haptic: medium
          #   hold_action:
          #     action: none
          #   type: 'custom:button-card'
  styles:
    card:
      - padding: 2.75% 5.75% 0 5.75%
      # - background-color: '#00000'
      - background: >
          [[[
              let bg = states['sensor.vibrant_color'].state;
              return `linear-gradient(to top, rgba(${bg},.1), rgba(${bg},.6))`;
          ]]]
      - background-image: '#00000'
      - transition: all 0.5s ease-out
    custom_fields:
      spotify:
        - display: block
        - position: absolute
        - justify-self: center
        - width: 84%
      media_card_speaker:
        - display: block
        - position: absolute
        - justify-self: center
        - width: 100%
      blur_overlay:
        - display: none
        #   # - background-color: '#00000'
        #   - background: >
        #       [[[
        #           let bg = states['sensor.vibrant_color'].state;
        #           return `rgba(${bg},.2)`;
        #       ]]]
        #   - background-image: none
        #   - clip-path: >
        #       inset(80% 1.45% 1.45% 1.45% round 0 0 calc(var(--button-card-border-radius) / 2) calc(var(--button-card-border-radius) / 2))
        # icon:
        - width: 22%
      progress:
        - top: 80%
      bar:
        - top: 80%
  #################################################
  #                                               #
  #            MUSIC PLAYER BUTTON                #
  #                                               #
  #################################################
music_card_speaker_button:
  show_name: false
  show_state: false
  show_icon: true
  size: 24px
  tap_action:
    action: call-service
    service: >
      [[[ return variables.media_service; ]]]
    service_data:
      entity_id: '[[[ return variables.entity_id; ]]]'
  styles:
    icon:
      - color: rgba(255, 255, 255, 1)
      - filter: drop-shadow(2px 4px 4px rgba(0,0,0,0.7))
  extra_styles: |
    [[[
      return `
        #icon {
          opacity: 0.2;
          transition-duration: 0.1s;
        }
        #icon:hover {
          opacity: 0.7;
          transform: scale(1.2);
          transition-duration: 0.2s;
        }
      `
    ]]]
  #################################################
  #                                               #
  #               ICON RATINGS                    #
  #                                               #
  #################################################
icon_rating:
  variables:
    star_rating: ''
  styles:
    card:
      - --star-color: '#fec401'
    custom_fields:
      rating:
        - position: absolute
        - width: 15%
        - justify-self: start
        - opacity: 1
  custom_fields:
    rating: >
      [[[
          let value = variables.star_rating || '';
            return `
              <svg viewBox="0 0 24 24">
                <style>
                  text {
                      font-size: 14px;
                      font-weight: 700;
                      text-shadow: 2px 0 0 var(--star-color),-2px 0 0 var(--star-color),0 2px 0 var(--star-color),0 -2px 0 var(--star-color),1px 1px var(--star-color),-1px -1px 0 var(--star-color),1px -1px 0 var(--star-color),-1px 1px 0 var(--star-color);
                    }
                    #star {
                      fill: var(--star-color)
                    }
                </style>
                <path id="star" d="M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z"/>
                <text id="star_value" x="50%" y="60%" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${value}</text>
              </svg>
            `
      ]]]
  #################################################
  #                                               #
  #               REMOTE CONTROL                  #
  #                                               #
  #################################################
atv_popup_ios:
  double_tap_action:
    action: fire-dom-event
    browser_mod:
      service: browser_mod.popup
      data:
        title: 'ATV Remote'
        style: >
          --popup-background-color: rgba(21,25,35,1);
        card_mod:
          style:
            .: |
              ha-dialog>ha-dialog-header {
                display: none;
              }
              @media (max-width: 450px), (max-height: 500px) {
                .content .container {
                  margin: 0 6.8% !important;
                }
                ha-dialog {
                  --mdc-dialog-min-width: 100vw !important;
                  --mdc-dialog-min-height: 100vh !important;
                  --popup-border-radius: 0 !important;
                }
                ha-dialog>ha-dialog-header {
                  display: block !important;
                }
              }
        content:
          type: custom:apple-tv-card
          background: 'linear-gradient(155deg, rgba(60,66,80,1) 0%, rgba(23,26,37,1) 42%, rgba(21,25,35,1) 100%)'
          entity: media_player.atv
          full_screen: true
          remote: remote.atv
          sources:
            - source_name: Infuse
            - source_name: Disney+
            - source_name: Netflix
            - source_name: Prime Video
            - image: /local/community/Apple-Tv-Card/logo/Prime Video.png
              source_name: YouTube
            - image: /local/community/Apple-Tv-Card/logo/DAZN.png
              source_name: DAZN
atv_popup_web:
  double_tap_action:
    action: fire-dom-event
    browser_mod:
      service: browser_mod.popup
      data:
        title: 'Apple TV'
        style: >
          --popup-background-color: rgba(0, 0, 0, .2);
          --popup-max-width: calc(450px + 450px);
        card_mod:
          style:
            .: |
              :host {
                --ha-card-border-radius: 12px !important;
                --mush-rgb-state-media-player: 3, 169, 244;
                --mush-rgb-blue-grey: 96, 125, 139;
                --ha-card-background: #ffffff0d !important;
              }
              @media (max-width: 450px), (max-height: 500px) {
                ha-dialog {
                  --mdc-dialog-min-width: 100vw !important;
                  --mdc-dialog-min-height: 100vh !important;
                  --popup-border-radius: 0 !important;
                }
              }
        content:
          type: custom:layout-card
          layout_type: custom:grid-layout
          layout:
            margin: 0
            grid-gap: 10px
            grid-template-columns: 0 430px 430px 0
            grid-template-rows: fit-content(100%)
            grid-template-areas: |
              ". player remote ."
            mediaquery:
              #phone
              '(max-width: 800px)':
                grid-template-columns: 1fr
                grid-template-rows: fit-content(100%) fit-content(100%)
                grid-template-areas: |
                  "player"
                  "remote"
          cards:
            - type: custom:stack-in-card
              view_layout:
                grid-area: player
              cards:
                - type: custom:mushroom-media-player-card
                  entity: media_player.living_room_tv
                  icon: mdi:play
                  use_media_info: true
                  use_media_artwork: false
                  show_volume_level: true
                  collapsible_controls: true
                  media_controls:
                    - play_pause_stop
                    - previous
                    - next
                  volume_controls:
                    - volume_buttons
                    - volume_set
                  fill_container: false
                  card_mod:
                    style: |
                      mushroom-shape-icon {
                        display: flex;
                        {% set media_type = state_attr(config.entity, 'media_content_type') %}
                        {% if media_type == 'tvshow' %}
                          --card-mod-icon: mdi:television-classic;
                          animation: flicker 1s linear infinite alternate;
                        {% elif media_type == 'video' %}
                          --card-mod-icon: mdi:movie-roll;
                          animation: spin 2s linear infinite reverse;
                        {% elif media_type == 'music' %}
                          --card-mod-icon: mdi:music;
                          animation: beat 1.3s ease-out infinite both;
                        {% elif media_type == 'playlist' %}
                          --card-mod-icon: mdi:music;
                          animation: beat 1.3s ease-out infinite both;
                        {% else %}
                          --card-mod-icon: mdi:play;
                        {% endif %}
                        {{ 'animation: none;' if not is_state(config.entity, 'playing') }}
                      }
                      @keyframes flicker {
                        0%, 31.98%, 32.98%, 34.98%, 36.98%, 39.98%, 67.98%, 68.98%, 95.98%, 96.98%, 97.98%, 98.98%, 100% { --icon-color: rgba(var(--album-art-color), 1); }
                        32%, 33%, 35%, 36%, 37%, 40%, 68%, 69%, 96%, 97%, 98%, 99% { --icon-color: rgba(var(--album-art-color), 0.6); }
                      }
                      @keyframes beat {
                        0%, 60% { --icon-symbol-size: 21px; }
                        5%, 17%, 57% { --icon-symbol-size: 22px; }
                        10%, 20%, 51% { --icon-symbol-size: 23px; }
                        25%, 45% { --icon-symbol-size: 24px; }
                        30%, 39% { --icon-symbol-size: 25px; }
                        33% { --icon-symbol-size: 26px; }
                      }
                      ha-card {
                        --ha-card-border-width: 0;
                        --rgb-state-media-player: var(--album-art-color);
                      }
                      .actions {
                        --rgb-primary-text-color: var(--album-art-color);
                        --primary-text-color: rgb(var(--album-art-color));
                      }
                      ha-card:before {
                        transform: translate3d(0,0,0);
                        -webkit-transform: translate3d(0,0,0);
                        content: "";
                        background: url('/local/img/atv.png') center no-repeat;
                        {% if not is_state('media_player.living_room_tv', 'idle') and not is_state('media_player.living_room_tv', 'off') %}
                        {% set appname = state_attr('media_player.currently_playing', 'app_id') %}
                          {% if appname == 'com.google.ios.youtube' %}
                            background: url( '{{ states.sensor.youtube_thumbnail.attributes.entity_picture }}' ) center no-repeat;
                          {% else %}
                            background: url( '{{ state_attr('media_player.living_room_tv', "entity_picture") }}' ) center no-repeat;
                          {% endif %}
                        {% endif %}
                        background-size: contain;
                        margin: 4px 4px 16px;
                        filter: drop-shadow(4px 4px 6px rgba(0, 0, 0, 0.5));
                        border-radius: var(--control-border-radius);
                        aspect-ratio: 16 / 9;
                      }
                - type: conditional
                  conditions:
                    - entity: media_player.living_room_tv
                      state_not: 'off'
                    - entity: media_player.living_room_tv
                      state_not: 'idle'
                  card:
                    entity: media_player.living_room_tv
                    hide:
                      icon: true
                      name: true
                      runtime: true
                      source: true
                      power: true
                      state_label: true
                      volume: true
                      info: true
                      progress: false
                      controls: true
                    more_info: false
                    type: custom:mini-media-player
                    toggle_power: false
                    group: true
                    card_mod:
                      style:
                        mmp-progress$: |
                          paper-progress {
                            {% if is_state(config.entity, 'playing') %}
                              --paper-progress-container-color: rgba(var(--album-art-color), 0.2) !important;
                            {% endif %}
                          }
                        .: |
                          ha-card {
                            margin: 0px 12px 12px;
                            --mmp-progress-height: 12px !important;
                            height: var(--mmp-progress-height);
                            --mmp-accent-color: rgb(var(--album-art-color));
                            --mmp-border-radius: 12px !important;
                            --ha-card-border-width: 0;
                          }
              card_mod:
                style: |
                  ha-card:before {
                    transform: translate3d(0,0,0);
                    -webkit-transform: translate3d(0,0,0);
                    content: "";
                    position: absolute;
                    height: 100%;
                    width: 100%;
                    background: url('/local/img/atv.png') center no-repeat;
                    {% if not is_state('media_player.living_room_tv', 'idle') and not is_state('media_player.living_room_tv', 'off') %}
                    {% set appname = state_attr('media_player.currently_playing', 'app_id') %}
                      {% if appname == 'com.google.ios.youtube' %}
                        background: url( '{{ states.sensor.youtube_thumbnail.attributes.entity_picture }}' ) center no-repeat;
                        {% else %}
                        background: url( '{{ state_attr('media_player.currently_playing', "entity_picture") }}' ) center no-repeat;
                      {% endif %}
                    {% endif %}
                    filter: blur(150px) saturate(200%);
                    background-size: 100% 100%;
                  }
                  ha-card {
                    transform: translate3d(0,0,0);
                    -webkit-transform: translate3d(0,0,0);
                  }
                  :host {
                    --album-art-color:
                    {% if not is_state('media_player.currently_playing', 'idle') and not is_state('media_player.currently_playing', 'off') and states('sensor.muted_color') not in ['unknown', 'unavaible'] %}
                      {{ states('sensor.muted_color') }}
                    {% else %}
                    var(--mush-rgb-blue-grey)
                    {% endif %};
                  }
            - type: grid
              view_layout:
                grid-area: remote
              columns: 4
              square: false
              cards:
                # - type: custom:button-card
                #   entity: media_player.living_room_tv
                #   icon: mdi:volume-mute
                #   tap_action:
                #     action: call-service
                #     service: media_player.volume_mute
                #     service_data:
                #       entity_id: >
                #         [[[ return entity.entity_id; ]]]
                #       is_volume_muted: >
                #         [[[ return entity.attributes.is_volume_muted === 'false' ? 'true' : 'false'; ]]]
                #   template: remote_icon_only
                # - type: custom:button-card
                #   entity: media_player.living_room_tv
                #   icon: mdi:volume-minus
                #   tap_action:
                #     action: call-service
                #     service: media_player.volume_down
                #     service_data:
                #       entity_id: >
                #         [[[ return entity.entity_id; ]]]
                #   template: remote_icon_only
                # - type: custom:button-card
                #   entity: media_player.living_room_tv
                #   icon: mdi:volume-plus
                #   tap_action:
                #     action: call-service
                #     service: media_player.volume_up
                #     service_data:
                #       entity_id: >
                #         [[[ return entity.entity_id; ]]]
                #   template: remote_icon_only
                - type: custom:button-card
                  icon: mdi:youtube
                  tap_action:
                    action: call-service
                    service: media_player.select_source
                    service_data:
                      entity_id: media_player.living_room_tv
                      source: 'YouTube'
                    haptic: light
                  template: remote_icon_only
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:menu
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: home_hold
                  template: remote_icon_only
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:arrow-up-drop-circle-outline
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: up
                  template: remote_icon_arrow
                - type: custom:button-card
                  entity: media_player.sony_bravia_tv
                  icon: mdi:power
                  tap_action:
                    action: call-service
                    service: >
                      [[[
                        return variables.state_on
                          ? 'media_player.turn_off'
                          : 'media_player.turn_on';
                      ]]]
                    service_data:
                      entity_id: media_player.sony_bravia_tv
                  template:
                    - remote_icon_arrow
                    - loader
                  # styles:
                  #   card:
                  #     - background-color: >
                  #         [[[
                  #           return variables.state_on
                  #             ? 'rgba(206, 245, 149, 0.4)'
                  #             : 'rgba(139, 51, 51, 0.9)';
                  #         ]]]
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:spotify
                  tap_action:
                    action: call-service
                    service: media_player.select_source
                    service_data:
                      entity_id: media_player.living_room_tv
                      source: 'Spotify'
                    haptic: light
                  template: remote_icon_only
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:arrow-left-drop-circle-outline
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: left
                  template: remote_icon_arrow
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:crop-square
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: select
                  template: remote_icon_arrow
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:arrow-right-drop-circle-outline
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: right
                  template: remote_icon_arrow
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:netflix
                  tap_action:
                    action: call-service
                    service: media_player.select_source
                    service_data:
                      entity_id: media_player.living_room_tv
                      source: 'Netflix'
                    haptic: light
                  template: remote_icon_only
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:keyboard-backspace
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: menu
                  template: remote_icon_only
                - type: custom:button-card
                  entity: media_player.living_room_tv
                  icon: mdi:arrow-down-drop-circle-outline
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: down
                  template: remote_icon_arrow
                - type: custom:button-card
                  entity: rmedia_player.living_room_tv
                  icon: mdi:home
                  tap_action:
                    action: call-service
                    service: remote.send_command
                    service_data:
                      entity_id: remote.atv
                      command: home
                  template: remote_icon_only
        # content:
        #   type: vertical-stack
        #   cards:
        #     - type: custom:stack-in-card
        #       cards:
        #         - type: custom:mushroom-media-player-card
        #           entity: media_player.currently_playing
        #           icon: mdi:play
        #           use_media_info: true
        #           use_media_artwork: false
        #           show_volume_level: false
        #           media_controls:
        #             - play_pause_stop
        #             - previous
        #             - next
        #           volume_controls:
        #             - volume_buttons
        #             - volume_set
        #           fill_container: false
        #           card_mod:
        #             style: |
        #               mushroom-shape-icon {
        #                 display: flex;
        #                 {% set media_type = state_attr(config.entity, 'media_content_type') %}
        #                 {% if media_type == 'tvshow' %}
        #                   --card-mod-icon: mdi:television-classic;
        #                   animation: flicker 1s linear infinite alternate;
        #                 {% elif media_type == 'video' %}
        #                   --card-mod-icon: mdi:movie-roll;
        #                   animation: spin 2s linear infinite reverse;
        #                 {% elif media_type == 'music' %}
        #                   --card-mod-icon: mdi:music;
        #                   animation: beat 1.3s ease-out infinite both;
        #                 {% elif media_type == 'playlist' %}
        #                   --card-mod-icon: mdi:music;
        #                   animation: beat 1.3s ease-out infinite both;
        #                 {% else %}
        #                   --card-mod-icon: mdi:play;
        #                 {% endif %}
        #                 {{ 'animation: none;' if not is_state(config.entity, 'playing') }}
        #               }
        #               @keyframes flicker {
        #                 0%, 31.98%, 32.98%, 34.98%, 36.98%, 39.98%, 67.98%, 68.98%, 95.98%, 96.98%, 97.98%, 98.98%, 100% { --icon-color: rgba(var(--album-art-color), 1); }
        #                 32%, 33%, 35%, 36%, 37%, 40%, 68%, 69%, 96%, 97%, 98%, 99% { --icon-color: rgba(var(--album-art-color), 0.6); }
        #               }
        #               @keyframes beat {
        #                 0%, 60% { --icon-symbol-size: 21px; }
        #                 5%, 17%, 57% { --icon-symbol-size: 22px; }
        #                 10%, 20%, 51% { --icon-symbol-size: 23px; }
        #                 25%, 45% { --icon-symbol-size: 24px; }
        #                 30%, 39% { --icon-symbol-size: 25px; }
        #                 33% { --icon-symbol-size: 26px; }
        #               }
        #               ha-card {
        #                 --ha-card-border-width: 0;
        #                 --rgb-state-media-player: var(--album-art-color);
        #               }
        #               .actions {
        #                 --rgb-primary-text-color: var(--album-art-color);
        #                 --primary-text-color: rgb(var(--album-art-color));
        #               }
        #               ha-card:before {
        #                 transform: translate3d(0,0,0);
        #                 -webkit-transform: translate3d(0,0,0);
        #                 {% if not is_state(config.entity, 'idle') and not is_state(config.entity, 'off') %}
        #                   content: "";
        #                 {% endif %}
        #                 {% if not is_state('media_player.currently_playing', 'idle') and not is_state('media_player.currently_playing', 'off') %}
        #                 {% set source = state_attr('media_player.currently_playing', 'source') %}
        #                 {% set appname = state_attr('media_player.currently_playing', 'app_id') %}
        #                   {% if source == 'YouTube' %}
        #                     background: url( '{{ states.sensor.youtube_thumbnail.attributes.entity_picture }}' ) center no-repeat;
        #                     {% elif appname == 'com.google.ios.youtube' %}
        #                     background: url( '{{ states.sensor.youtube_thumbnail.attributes.entity_picture }}' ) center no-repeat;
        #                     {% else %}
        #                     background: url( '{{ state_attr('media_player.currently_playing', "entity_picture") }}' ) center no-repeat;
        #                   {% endif %}
        #                 {% endif %}
        #                 background-size: contain;
        #                 margin: 4px 4px 16px;
        #                 filter: drop-shadow(4px 4px 6px rgba(0, 0, 0, 0.5));
        #                 border-radius: var(--control-border-radius);
        #                 {% set active_child = state_attr(config.entity, 'active_child') %}
        #                 {% if active_child == 'media_player.spotify' %}
        #                   aspect-ratio: 1 / 1;
        #                 {% elif active_child == 'media_player.living_room_tv' %}
        #                   aspect-ratio: 16 / 9;
        #                 {% elif active_child == 'media_player.bedroom_tv' %}
        #                   aspect-ratio: 2 / 3;
        #                 {% else %}
        #                   aspect-ratio: 1 / 1;
        #                 {% endif %}
        #               }
        #         - type: conditional
        #           conditions:
        #             - entity: media_player.currently_playing
        #               state_not: 'off'
        #             - entity: media_player.currently_playing
        #               state_not: idle
        #           card:
        #             entity: media_player.currently_playing
        #             hide:
        #               icon: true
        #               name: true
        #               runtime: true
        #               source: true
        #               power: true
        #               state_label: true
        #               volume: true
        #               info: true
        #               progress: false
        #               controls: true
        #             more_info: false
        #             type: custom:mini-media-player
        #             toggle_power: false
        #             group: true
        #             card_mod:
        #               style:
        #                 mmp-progress$: |
        #                   paper-progress {
        #                     {% if is_state(config.entity, 'playing') %}
        #                       --paper-progress-container-color: rgba(var(--album-art-color), 0.2) !important;
        #                     {% endif %}
        #                   }
        #                 .: |
        #                   ha-card {
        #                     margin: 0px 12px 12px;
        #                     --mmp-progress-height: 12px !important;
        #                     height: var(--mmp-progress-height);
        #                     --mmp-accent-color: rgb(var(--album-art-color));
        #                     --mmp-border-radius: 12px !important;
        #                     --ha-card-border-width: 0;
        #                   }
        #       card_mod:
        #         style: |
        #           ha-card:before {
        #             transform: translate3d(0,0,0);
        #             -webkit-transform: translate3d(0,0,0);
        #             content: "";
        #             position: absolute;
        #             height: 100%;
        #             width: 100%;
        #             background: url('/local/idle_art.png') center no-repeat;
        #             {% if not is_state('media_player.currently_playing', 'idle') and not is_state('media_player.currently_playing', 'off') %}
        #             {% set source = state_attr('media_player.currently_playing', 'source') %}
        #             {% set appname = state_attr('media_player.currently_playing', 'app_id') %}
        #               {% if source == 'YouTube' %}
        #                 background: url( '{{ states.sensor.youtube_thumbnail.attributes.entity_picture }}' ) center no-repeat;
        #                 {% elif appname == 'com.google.ios.youtube' %}
        #                 background: url( '{{ states.sensor.youtube_thumbnail.attributes.entity_picture }}' ) center no-repeat;
        #                 {% else %}
        #                 background: url( '{{ state_attr('media_player.currently_playing', "entity_picture") }}' ) center no-repeat;
        #               {% endif %}
        #             {% endif %}
        #             filter: blur(150px) saturate(200%);
        #             background-size: 100% 100%;
        #           }
        #           ha-card {
        #             transform: translate3d(0,0,0);
        #             -webkit-transform: translate3d(0,0,0);
        #           }
        #           :host {
        #             --album-art-color:
        #             {% if not is_state('media_player.currently_playing', 'idle') and not is_state('media_player.currently_playing', 'off') and states('sensor.muted_color') not in ['unknown', 'unavaible'] %}
        #               {{ states('sensor.muted_color') }}
        #             {% else %}
        #             var(--mush-rgb-blue-grey)
        #             {% endif %};
        #           }
        #     - type: grid
        #       columns: 4
        #       cards:
        #         - type: custom:button-card
        #           icon: mdi:youtube
        #           tap_action:
        #             action: call-service
        #             service: media_player.select_source
        #             service_data:
        #               entity_id: media_player.living_room_tv
        #               source: 'YouTube'
        #             haptic: light
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:volume-mute
        #           tap_action:
        #             action: call-service
        #             service: media_player.volume_mute
        #             service_data:
        #               entity_id: >
        #                 [[[ return entity.entity_id; ]]]
        #               is_volume_muted: >
        #                 [[[ return entity.attributes.is_volume_muted === 'false' ? 'true' : 'false'; ]]]
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:volume-minus
        #           tap_action:
        #             action: call-service
        #             service: media_player.volume_down
        #             service_data:
        #               entity_id: >
        #                 [[[ return entity.entity_id; ]]]
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:volume-plus
        #           tap_action:
        #             action: call-service
        #             service: media_player.volume_up
        #             service_data:
        #               entity_id: >
        #                 [[[ return entity.entity_id; ]]]
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:kodi
        #           tap_action:
        #             action: call-service
        #             service: media_player.select_source
        #             service_data:
        #               entity_id: media_player.living_room_tv
        #               source: 'Kodi'
        #             haptic: light
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:menu
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: home_hold
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:arrow-up-drop-circle-outline
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: up
        #           template: remote_icon_arrow
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:power
        #           tap_action:
        #             action: call-service
        #             service: script.turn_on
        #             service_data:
        #               entity_id: script.atv_turn_on_off
        #           template:
        #             - remote_icon_arrow
        #             - loader
        #           styles:
        #             card:
        #               - background: >
        #                   [[[
        #                     return variables.state_on
        #                       ? 'rgba(206, 245, 149, 0.4)'
        #                       : 'rgba(139, 51, 51, 0.9)';
        #                   ]]]
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:spotify
        #           tap_action:
        #             action: call-service
        #             service: media_player.select_source
        #             service_data:
        #               entity_id: media_player.living_room_tv
        #               source: 'Spotify'
        #             haptic: light
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:arrow-left-drop-circle-outline
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: left
        #           template: remote_icon_arrow
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:crop-square
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: select
        #           template: remote_icon_arrow
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:arrow-right-drop-circle-outline
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: right
        #           template: remote_icon_arrow
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:netflix
        #           tap_action:
        #             action: call-service
        #             service: media_player.select_source
        #             service_data:
        #               entity_id: media_player.living_room_tv
        #               source: 'Netflix'
        #             haptic: light
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:keyboard-backspace
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: menu
        #           template: remote_icon_only
        #         - type: custom:button-card
        #           entity: media_player.living_room_tv
        #           icon: mdi:arrow-down-drop-circle-outline
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: down
        #           template: remote_icon_arrow
        #         - type: custom:button-card
        #           entity: rmedia_player.living_room_tv
        #           icon: mdi:home
        #           tap_action:
        #             action: call-service
        #             service: remote.send_command
        #             service_data:
        #               entity_id: remote.atv
        #               command: home
        #           template: remote_icon_only
remote:
  show_name: false
  show_state: false
  styles:
    card:
      - border-radius: var(--button-card-border-radius)
      - border-width: 0
      - -webkit-tap-highlight-color: rgba(0,0,0,0)
      - transition: none
      - box-shadow: 0px 3px 5px rgba(0, 0, 0, 0.15)
      - overflow: hidden
      # - padding: 11.5% 10.5% 10.5% 11.5%
      - --mdc-ripple-color: >
          [[[
            return variables.state_on
                ? 'rgb(0, 0, 0)'
                : '#97989c';
          ]]]
      - color: >
          [[[
            return variables.state_on
                ? '#4b5254'
                : '#97989c';
          ]]]
      - background-color: >
          [[[
            if (variables.state_error) {
              return variables.state_error
                ? 'rgba(139, 51, 51, 0.9)'
                : 'rgba(115, 115, 115, 0.2)';
            }
            else {
              return variables.state_on
                ? 'rgba(250, 250, 250, 0.75)'
                : 'rgba(115, 115, 115, 0.2)';
            }
          ]]]
    icon:
      - width: 32px
      - color: >
          [[[
            return variables.state_on
                ? '#4b5254'
                : '#97989c';
          ]]]
  #################################################
  #                                               #
  #               CONTROL TEMPLATE                #
  #                                               #
  #################################################
tpl_spotify:
  template:
    - base
  variables:
    country_code: ''
    playlist_type: ''
  show_state: false
  show_icon: false
  show_name: false
  custom_fields:
    spotify:
      card:
        type: 'custom:spotify-card'
        limit: 9
        spotify_entity: media_player.spotify
        # default_device: MBProServer
        playlist_type: >
          [[[ return variables.playlist_type ]]]
        country_code: >
          [[[ return variables.country_code ]]]
        hide_warning: true
        display_style: grid
        always_play_random_song: true
        grid_covers_per_row: 3
        grid_show_title: false
        hide_chromecast_devices: true
        hide_top_header: true
        hide_currently_playing: true
        hide_playback_controls: true
        card_mod:
          style: |
            ha-card {
              border-radius: calc(var(--custom-button-card-border-radius) / 2) !important;  /* card - rounded corners */
              aspect-ratio: 2/2 !important;  /* card - square */
              margin: 0px !important;  /* remove card margins to line up with rest of dashboard */
              padding: 0% !important;
            }
            .grid {
              object-fit: cover !important;  /* fill the whole card */
              aspect-ratio: 1/1;  /* needed for object-fit */
              border-radius: calc(var(--custom-button-card-border-radius) / 2) !important;  /* card - rounded corners */
              margin: 0px !important;  /* remove card margins to line up with rest of dashboard */
              gap: 5% !important;
            }
            .btn {
              top: 50% !important;  /* center buttons */
            }
            .grid-item {
              border-radius: var(--button-card-border-radius) !important;
              object-fit: cover !important;  /* fill the whole card */
              aspect-ratio: unset;  /* undo image aspect-ratio when clicked */
              box-shadow:none !important;
              color: transparent !important;
            }
            .grid-item-album-image img{
              border-radius: var(--button-card-border-radius) !important;
              object-fit: cover !important;  /* fill the whole card */
              aspect-ratio: unset;  /* undo image aspect-ratio when clicked */
              margin: 0px !important;  /* remove card margins to line up with rest of dashboard */
            }
            .grid-item:hover {
              box-shadow:none !important;
              color: transparent !important;
            }
            .grid-item-album-image.playing{
              border-radius: var(--button-card-border-radius) !important;
            }
            #header{
              display:none !important;
            }
            #footer{
              display:none !important;
            }
            .playback-controls{
              display:none !important;
            }
            #header-track{
              display:none;
            }
            #content{
              border: 0px !important;
              background-color: transparent !important;
            }
  styles:
    grid:
      - gap: 0
    card:
      - padding: 0
      - background: none
      - --mdc-ripple-color: none
      - --webkit-tap-highlight-color: none
tpl_minicontrol:
  custom_fields:
    minicontrol:
      card:
        # type: picture-elements
        # image: /local/img/svg/overlay.svg
        # card_mod:
        #   style: |
        #     ha-card {
        #       --ha-card-background: none !important;
        #     }
        # elements:
        type: custom:mini-media-player
        entity: >
          [[[ return variables.entity_id; ]]]
        hide:
          icon: true
          name: true
          runtime: true
          source: true
          power: true
          state_label: true
          volume: false
          info: true
          progress: true
          controls: false
        volume_stateless: true
        card_mod:
          style:
            mmp-media-controls$: |
              ha-icon-button {
                filter: drop-shadow(2px 4px 4px rgba(0,0,0,0.7));
                color: #ffffff70 !important;
              }
              ha-icon-button:hover {
                color: #ffffff !important;
                transform: scale(1.2);
                transition-duration: 0.2s;
                background: none !important;
              }
            .: |
              :host {
                --mmp-scale: 0.6;
              }
              ha-card>div.mmp-player {
                flex-wrap: nowrap;
                padding: 0px !important;
              }
              ha-card>div.mmp_bg {
                display: none !important;
              }
  styles:
    custom_fields:
      minicontrol:
        - display: flex
        - position: absolute
        - width: 100%
        - justify-self: center
        - bottom: 0%
        - display: >
            [[[
              return window.matchMedia('(max-width: 800px)').matches
                ? 'none'
                : 'inline-block';
            ]]]
tpl_ytube_music:
  template:
    - base
  variables:
    tilt_enable: >
      [[[
        return false;
      ]]]
  show_state: false
  show_icon: false
  show_name: false
  custom_fields:
    ytube:
      card:
        type: custom:polr-ytube-playing-card
        entity_id: media_player.ytube_music_player
        coverNavigation: true
        initialAction:
          media_content_id: RDCLAK5uy_mfdqvCAl8wodlx2P2_Ai2gNkiRDAufkkI
          media_content_type: playlist
        card_mod:
          style: |
            ha-card {
              height: 100% !important;
              aspect-ratio: 1/1 !important;
              padding: 0% !important;
              margin: -1px !important;
            }
            .background, .header {
              display: none !important;
            }
            .content {
              padding: 0 !important;
            }
            polr-media-control, polr-ytube-playing, polr-tab-bar {
              display: none !important;
            }
            polr-ytube-browser {
              display: flex !important;
            }
            .grid-item {
              border-radius: var(--button-card-border-radius) !important;
              object-fit: cover !important;  /* fill the whole card */
              aspect-ratio: unset;  /* undo image aspect-ratio when clicked */
              box-shadow:none !important;
              color: transparent !important;
            }
  styles:
    grid:
      - gap: 0
    card:
      - border-radius: calc(var(--button-card-border-radius) / 2)
      - padding: 0
      - background: none
      - --mdc-ripple-color: none
      - --webkit-tap-highlight-color: none
tpl_minicontrol_mass:
  custom_fields:
    minicontrol:
      card:
        type: custom:mini-media-player
        entity: media_player.mass_universal_airplay
        hide:
          icon: true
          name: true
          runtime: true
          source: true
          power: true
          state_label: true
          volume: false
          volume_level: true
          info: true
          progress: true
          controls: false
          mute: true
        volume_stateless: true
        card_mod:
          style:
            mmp-media-controls$: |
              ha-icon-button {
                filter: drop-shadow(2px 4px 4px rgba(0,0,0,0.7));
                color: #ffffff70 !important;
              }
              ha-icon-button:hover {
                color: #ffffff !important;
                transform: scale(1.2);
                transition-duration: 0.2s;
                background: none !important;
              }
            .: |
              ha-card>div.mmp-player{
                padding: 0px !important;
              }
  styles:
    custom_fields:
      minicontrol:
        - display: block
        - position: absolute
        - justify-self: start
        - width: 100%
        - bottom: 0px
        - display: >
            [[[
              return window.matchMedia('(max-width: 800px)').matches
                ? 'none'
                : null;
            ]]]
kodi_movie_card:
  template:
    - extra_styles
    - movie_tap_info
    - movie_double_tap
  show_name: true
  show_state: true
  show_label: false
  show_entity_picture: false
  show_icon: false
  name: >
    [[[
      let title = entity.attributes.friendly_name;
      let rating = Math.round(entity.attributes.rating);
      var output = title !== undefined && rating === 0
        ? `<div class="title">${title}</div>`
        : `
          <div class="title">${title}</div>
          <div class="rating">
          <span>${rating}</span>
          <ha-icon icon="fas:star" style="display: flex;width: 1rem; height: auto; margin-left: 0.25rem; margin-right: 0.25rem; color: #fde047;"></ha-icon>
          </div>`;
      return output;
    ]]]
  state_display: |
    [[[
      if (entity) {
          let year = entity.attributes?.year,
              runtime = entity.attributes?.runtime,
              genres = entity.attributes?.genres;

          var output = '';

          if (year !== undefined && genres !== undefined) {
              output += `
                  <div>
                      <ha-icon class="state-icon" icon="mdi:calendar-month" ></ha-icon>
                      <span class="year">${year}</span>
                  </div>`;
          }

          if (runtime !== '' && runtime !== undefined) {
              output += `
                  <div>
                      <ha-icon class="state-icon"  icon="mdi:clock"></ha-icon>
                      <span class="year">${runtime}</span>
                  </div>`;
          }

          if (year !== undefined && genres !== undefined) {
              output += `
                  <div>${genres}</div>`;
          }

          return output;
      }
    ]]]
  custom_fields:
    plot: >
      [[[
        let plot = entity.attributes.overview;
        return `
          ${plot}
        `
      ]]]
    poster: >
      [[[
        let poster = entity.attributes.poster_url;
        return`
            <div class="poster-wrapper">
              <img src="${poster}">
              <div class="moreinfo">
                <ha-icon icon="mdi:play"></ha-icon>
              </div>
            </div>
          `;
      ]]]
  styles:
    grid:
      - grid-template-areas: |
          "poster   n"
          "poster   s"
          "poster   plot"
      - grid-template-columns: min-content 1fr
      - grid-template-rows: min-content min-content 1fr
      - grid-gap: 8px
      - margin: 0
    card:
      - transition-property: all
      - transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1)
      - transition-duration: 300ms

kodi_upcoming_poster:
  show_icon: false
  show_entity_picture: false
  show_state: false
  show_label: true
  show_name: false
  label: |
    [[[
      return `<span>${entity.attributes.genres}</span>`;
    ]]]
  styles:
    card:
      - background-image: |
          [[[ return `url(${entity.attributes.poster_url})`; ]]]
      - background-size: contain
      - width: 150px
      - height: calc(150px * 1.5)
      - padding: 0
      - margin: 0
    grid:
      - grid-template-columns: auto
      - grid-template-rows: 1fr

movie_double_tap:
  double_tap_action:
    action: call-service
    service: script.run_plugin
    service_data:
      file: >
        [[[ return entity.attributes.strm_url; ]]]
movie_tap_info:
  tap_action:
    action: fire-dom-event
    browser_mod:
      service: browser_mod.popup
      data:
        card_mod:
          style:
            #popup header
            .: |
              @media (max-width: 450px), (max-height: 500px) {
                ha-dialog {
                  --mdc-dialog-min-width: 100vw !important;
                  --mdc-dialog-min-height: 100vh !important;
                  --popup-border-radius: 0 !important;
                }
              }
              .content .container {
                padding: 0 !important;
              }
        title: >
          [[[
            if (entity) {
              if (entity && entity.attributes ) {
                let title = entity.attributes.title;
                return `${title}`;
              }
            }
          ]]]
        content:
          type: custom:layout-card
          layout_type: custom:grid-layout
          layout:
            margin: 0
            grid-template-columns: 60vw
            grid-template-rows: fit-content(100%)
            mediaquery:
              '(max-width: 800px)':
                grid-template-columns: 100vw
          cards:
            - type: iframe
              aspect_ratio: >
                [[[
                  return (window.matchMedia('(max-width: 800px)').matches)
                    ? '180%'
                    : '';
                  /*if (window.matchMedia('(max-width: 800px)').matches)
                    return '180%';
                  else return '100%';*/
                ]]]
              url: >
                [[[
                  if (entity) {
                    if (entity && entity.attributes ) {
                      let tmdb = entity.attributes.tmdb_link;
                      return `${tmdb}`;
                    }
                  }
                ]]]

new_media_player:
  template:
    # - progress_bar
  variables:
    media_on: >
      [[[ return !entity || ['playing', 'on'].indexOf(entity.state) !== -1; ]]]
    vibrant_color: >
      [[[ return states['sensor.light_vibrant_color'].state; ]]]
    entity_picture: >
      [[[ return !entity || entity.attributes.entity_picture; ]]]
    entity_id: >
      [[[ return !entity || entity.entity_id; ]]]
  triggers_update: all
  show_state: true
  show_label: false
  show_icon: true
  show_name: false
  show_entity_picture: false
  tap_action:
    action: none
  size: 20px
  state_display: |
    [[[
      let album = entity.attributes.media_album_name,
          artist = entity.attributes.media_artist,
          title = entity.attributes.media_title;
      return `
        <span>${title}</span>
        <span>${artist}</span>
      `
    ]]]

  custom_fields:
    thumbnail: >
      [[[
        return `<img src="${variables.entity_picture}">`;
      ]]]

    # player: >
    #   [[[
    #     if (entity)

    #       setTimeout(() => {
    #       let elt = this.shadowRoot,
    #           playButton = elt.getElementById('playButton');

    #       playButton.addEventListener('click', () => {
    #           if (entity.state === "playing") {
    #             // Call the Home Assistant service to play media
    #             hass.callService('media_player', 'media_pause', { "entity_id": entity.entity_id });
    #           } else {
    #             // Call the Home Assistant service to pause media
    #             hass.callService('media_player', 'media_play', { "entity_id": entity.entity_id });
    #           }
    #         }, { passive: true });
    #       }, 0);

    #       let output = `
    #         <div class="playbutton" id="playButton" style="cursor: pointer;">
    #           <svg xmlns="http://www.w3.org/2000/svg" height="24" width="18" viewBox="0 0 384 512">
    #             <path d="M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z"/>
    #           </svg>
    #         </div>`;

    #       return output;

    #   ]]]
    player:
      # do_not_eval: true
      card:
        type: horizontal-stack
        cards:
          - type: custom:button-card
            template:
              - music_card_speaker_button
            icon: mdi:skip-next
            variables:
              media_service: 'media_player.media_next_track'
              entity_id: '[[[ return entity.entity_id; ]]]'

          - type: custom:button-card
            template:
              - music_card_speaker_button
            show_icon: false
            custom_fields:
              icon: >
                [[[
                  return `
                    <svg xmlns="http://www.w3.org/2000/svg" height="24" width="18" viewBox="0 0 384 512">
                    <path d="M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z"/>
                    </svg>
                  `
                ]]]
            variables:
              media_service: >
                [[[
                  return variables.media_on
                    ? "media_player.media_pause"
                    : "media_player.media_play";
                ]]]
              entity_id: '[[[ return entity.entity_id; ]]]'

          - type: custom:button-card
            show_state: false
            show_name: false
            show_icon: true
            icon: mdi:skip-previous
            size: 20px
            entity: media_player.spotify
            tap_action:
              action: call-service
              service: media_player.media_play_pause
              service_data:
                entity_id: '[[[ return entity.entity_id; ]]]'
          - type: custom:button-card
            show_state: false
            show_name: false
            show_icon: true
            icon: mdi:shuffle
            size: 20px
            entity: media_player.spotify
            tap_action:
              action: call-service
              service: media_player.media_play_pause
              service_data:
                entity_id: '[[[ return entity.entity_id; ]]]'

  styles:
    grid:
      - grid-template-columns: minmax(112px, 150px) 1fr min-content
      - grid-template-rows: min-content 1fr min-content
      - grid-template-areas: |
          "thumbnail  .   i"
          "thumbnail  s   s"
          "thumbnail  player player"
      - grid-gap: 0 1rem

    card:
      - padding: 1rem
      - border-radius: 0.75rem
      - min-height: 100%
      - background: >
          [[[ return `rgba(${variables.vibrant_color}, 0.2)`; ]]]
      - box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1)
      - backdrop-filter: blur(15px)
      - -webkit-backdrop-filter: blur(15px)
      - border: 1px solid rgba(171, 171, 171, 0.1)
      - place-items: baseline
      - overflow: hidden

  extra_styles: >
    #card {
      height: 200px;
      min-with: 224px;
    }
    #thumbnail {
      display: flex;
      width: 100%;
      height: auto;
      justify-content: center;
      align-items: center;
    }
    img {
      border-radius: 1rem;
      object-fit: cover;
      max-width: 100%;
      height: auto;
    }
    #state {
      display: flex;
      flex-direction: column;
      width: 100%;
      height: 100%;
      align-items: flex-start;
      justify-content: flex-start;
    }
    ha-icon {
      width: 24px !important;
      height: 24px !important;
    }
