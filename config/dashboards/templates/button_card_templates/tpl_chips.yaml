#-
#       _     _
#   ___| |__ (_)_ __  ___
#  / __| '_ \| | '_ \/ __|
# | (__| | | | | |_) \__ \
#  \___|_| |_|_| .__/|___/
#              |_|
#- from github.com/ngocjohn/hass-config
#
chips:
  template:
    - settings
    - extra_styles
  variables:
    state_on: >
      [[[ return ['on', 'home', 'Normal', 'Away', 'Night', 'Guest', 'cool', 'fan_only', 'unlocked', 'open', 'streaming', 'yes', 'Blažičkova', 'Plzeňská'].indexOf(!entity || entity.state) !== -1; ]]]
    state: >
      [[[ return !entity || entity.state; ]]]
    light_on: >
      [[[ return states['sensor.lights_count'].state;]]]
    playing: >
      [[[ return states['sensor.currently_playing'].attributes.device_playing; ]]]
    entity_id: >
      [[[ return !entity || entity.entity_id; ]]]
    entity_picture: >
      [[[ return !entity || entity.attributes.entity_picture; ]]]
    timeout: >
      [[[ return !entity || Date.now() - Date.parse(entity.last_changed); ]]]

    gle: >
      [[[ return states['sensor.gle'].state; ]]]
    hover_enable: true
  # size: 2vw
  show_icon: true
  show_state: true
  show_name: true
  show_label: true
  show_units: true
  show_entity_picture: true
  state_display: >
    [[[
      if (entity) {
          return variables.state === 'home'
              ? variables.translate_home
              : variables.state === 'not_home'
                  ? variables.translate_not_home
                  : variables.state;
      }
      return variables.translate_unknown;
    ]]]
  tap_action:
    card_bounce: |
      [[[
        // add animation
        if (this.getElementsByTagName("style").length === 0) {
            // phone condition
            let mq = window.matchMedia('(max-width: 800px)').matches;
            let style = document.createElement('style');
            style.innerHTML = `
                @keyframes card_bounce {
                    0%   { transform: scale(1); }
                    10%  { transform: scale(${ mq ? '0.92' : '0.94' }); }
                    25%  { transform: scale(1); }
                    30%  { transform: scale(${ mq ? '0.96' : '0.98' }); }
                    100% { transform: scale(1); }
                }
            `;
            this.appendChild(style);
        }
        // duration
        let duration = 800;
        // animate
        this.style.animation = `card_bounce ${duration}ms cubic-bezier(0.22, 1, 0.36, 1)`;
        // reset
        window.setTimeout(() => { this.style.animation = "none"; }, duration + 100)
      ]]]
    haptic: medium
  double_tap_action:
    haptic: success
  hold_action:
    haptic: medium
  styles:
    grid:
      - grid-template-areas: |
          "i n"
          "i s"
      - grid-template-rows: min-content min-content
      - grid-template-columns: 1fr 2fr
      - column-gap: 8px
    card:
      # - box-shadow: 0px 3px 5px rgba(0, 0, 0, 0.15)
      - --mdc-ripple-color: rgba(0, 0, 0, 0.8)
      - color: >
          [[[
            return variables.state_on
                ? '#4b5254'
                : '#97989c';
          ]]]
      - background-color: >
          [[[
              return variables.state_on
                ? 'rgba(250, 250, 250, 0.75)'
                : 'rgba(115, 115, 115, 0.2)';
          ]]]
      - padding: 0.3vw
      - box-sizing: border-box;
      - border: 1px solid transparent;
    state:
      - font-weight: 400
      - padding: 0 0.4vw 0 0
      - line-height: 100%
      - align-self: center
      - justify-self: start
      - color: >
          [[[
            return variables.state_on
              ? 'rgb(139, 51, 51)'
              : '#4b5254';
          ]]]
    name:
      - justify-self: start
      - padding: 0 0.4vw 0 0
      - line-height: 160%
      - letter-spacing: 0.06em
    img-cell:
      - display: inline-flex
      - place-items: center
      - position: relative
    icon:
      - width: 40%
      - height: auto
      - background: rgb(150 150 150 / 30%)
      - border-radius: 1vw
      - padding: 10%
      - position: inherit
      - place-self: center baseline
      - opacity: >
          [[[
              return variables.state_on
                ? 1
                : 0.4;
          ]]]
chip_air:
  template:
    - chips
  show_icon: false
  custom_fields:
    icon: >
      [[[
        let value = Math.round(states['sensor.air_quality_index'].state),
            dash = value + " " + (100 - value);
        let keyPoints;
          if (value < 100) {
            keyPoints = "0" + ";" + value / 100;
          }
          if (value > 100) {
            keyPoints = "0" + ";" + "1";
          }
        const colorMap = {
          'Excellent': '#4CAF50',
          'Good': '#8BC34A',
          'Fair': '#FFEB3B',
          'Interior': '#FF5722',
          'Poor': '#607D8B'
        };
        let state = colorMap[variables.state];


        return `
            <svg class="svgicon" viewbox="0 0 100 100">
                <style>
                  .bg {
                    stroke: #ffffff40;
                    stroke-width: 10;
                    fill: #00000030;
                    stroke-linecap: round;
                  }
                  .value {
                    stroke: url(#gradient);
                    fill: none;
                    stroke-width: 10;
                    stroke-dasharray: ${dash};
                    stroke-linecap: round;
                  }
                  .circle {
                    stroke: #ffffff80;
                    fill: ${state};
                    stroke-width: 9;
                  }
                  text {
                    font-family: 'poppins';
                    text-anchor: middle;
                    alignment-baseline: middle;
                    opacity: 0.9;
                  }

                </style>
                <linearGradient id="gradient" x="0%" y="100%">
                  <stop offset="0%" stop-color="#4CAF50" />
                  <stop offset="100%" stop-color="#FF5722" />
                </linearGradient>
                <path class="bg" d="M 20,80 A 40 40 0 1 1 80,80" />
                <path id="value" class="value" d="M 20,80 A 40 40 0 1 1 80,80" pathLength="99" />
                <circle class="circle" cx="0" cy="0" r="3">
                    <animateMotion dur="1.5s" path="M 20,80 A 40 40 0 1 1 80,80" keyPoints="${keyPoints}" fill="freeze" keyTimes="0;1"
                        calcMode="paced" />
                </circle>
                  <text font-size="2rem" fill="#97989c" font-weight="400" x="50%" y="52%">${value}</text>
                  <text font-size="1rem" fill="#ffffff80" x="50%" y="80%">µg/m³</text>
            </svg>
            `
      ]]]
  styles:
    grid:
      - grid-template-areas: |
          "icon n"
          "icon s"
      - grid-template-rows: min-content min-content
      - grid-template-columns: 1fr 2fr
      - column-gap: 8px
    card:
      - color: '#97989c'
      - background: linear-gradient(to bottom, rgba(53, 59, 83, 0.8) 0%, rgba(10, 14, 34, 0.8) 50%, rgba(53, 59, 83, 0.8) 100%)
      # - border-bottom-color: rgba(10, 14, 34, 1)
      - padding: 0.2vw
    state:
      - color: &color >
          [[[
            const colorMap = {
              'Excellent': '#4CAF50',
              'Good': '#8BC34A',
              'Fair': '#FFEB3B',
              'Interior': '#FF5722',
              'Poor': '#607D8B'
            };

            let state = colorMap[variables.state];
            return `${state}`
          ]]]
    custom_fields:
      icon:
        - display: flex
        - justify-content: center
        - align-items: center
chip_system:
  template:
    - chips
  state_display: >
    [[[
      return (variables.state) +(entity.attributes.unit_of_measurement);
    ]]]
  tap_action:
    action: more-info
  styles:
    card:
      - padding: 0.3vw
      - box-sizing: border-box;
      - border: 1px solid transparent;
      - border-bottom: inherit;
      - border-bottom-color: rgba(10, 14, 34, 1);
      - color: rgba(255, 255, 255, 0.6)
      - background: linear-gradient(to bottom, rgba(115, 115, 115, 0.2) 0%, rgba(49, 49, 49, 0.2) 100%)
    state:
      - color: &systemcolor >
          [[[
            let stateColor;
            if (variables.state >= 75) {
              stateColor = '#FF5722'; // Highest priority
            } else if (variables.state >= 45) {
              stateColor = '#FFEB3B';
            } else if (variables.state >= 35) {
              stateColor = '#8BC34A';
            } else if (variables.state >= 1) {
              stateColor = '#4CAF50';
            } else {
              stateColor = '#000000'; // Default color if no condition is met
            }

            return stateColor;

          ]]]
    icon:
      - color: *systemcolor
      - opacity: 0.8
